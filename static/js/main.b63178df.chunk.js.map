{"version":3,"sources":["components/Cards/Cards.elements.js","components/Cards/Cards.jsx","handles/index.js","api/index.js","components/Chart/Chart.elements.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.elements.js","components/CountryPicker/CountryPicker.jsx","images/image1.jpg","components/Footers/Footers.js","App.js","index.js"],"names":["Container","styled","div","CardWrapper","InfectedWrapper","RecoveredWrapper","DeathWrapper","Cards","data","confirmed","recovered","deaths","lastUpdate","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","data-cy","Intl","NumberFormat","format","value","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","initialDailyData","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","FormControlWrapper","CountryPicker","handleCountryChange","setCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","Footers","getFullYear","ImageWrapper","App","state","setState","this","src","image","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"mRAEaA,EAAYC,IAAOC,IAAV,+CAITC,EAAcF,IAAOC,IAAV,iFAKXE,EAAkBH,IAAOC,IAAV,8EAGfG,EAAmBJ,IAAOC,IAAV,8EAIhBI,EAAeL,IAAOC,IAAV,2E,OC6EVK,EAhFD,SAAC,GAA4D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,WACrD,OAAKH,EAIH,cAACT,EAAD,UACE,cAACa,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAApC,SACE,eAACb,EAAD,WACE,cAACU,EAAA,EAAD,CAAMI,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAxC,SACE,eAACjB,EAAD,WACG,IACD,eAACkB,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,UACG,IADH,cAIA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACE,qBAAKC,UChCY,oBDgCjB,UACG,IAAIC,KAAKC,cAAeC,OAAOrB,EAAUsB,WAEhC,IACd,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SACG,IAAIQ,KAAKpB,GAAYqB,iBAExB,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,qDAON,cAACb,EAAA,EAAD,CAAMI,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAxC,SACE,cAAChB,EAAD,UACE,eAACiB,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,UACG,IADH,eAIA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACE,qBAAKC,UCrDa,qBDqDlB,UACG,IAAIC,KAAKC,cAAeC,OAAOpB,EAAUqB,WAG9C,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SACG,IAAIQ,KAAKpB,GAAYqB,iBAExB,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,0DAON,cAACb,EAAA,EAAD,CAAMI,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAxC,SACE,cAACf,EAAD,UACE,eAACgB,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,UACG,IADH,YAIA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACE,qBAAKC,UC1ES,iBD0Ed,UACG,IAAIC,KAAKC,cAAeC,OAAOnB,EAAOoB,WAG3C,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SACG,IAAIQ,KAAKpB,GAAYqB,iBAExB,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,6DAlEL,mB,yBEfLQ,EAAM,iCAGCC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACnBC,EAAgBJ,EAEhBE,IACFE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJf,kBAUXG,IAAMC,IAAIF,GAVC,2BASnB9B,KAAQC,EATW,EASXA,UAAWC,EATA,EASAA,UAAWC,EATX,EASWA,OAAQC,EATnB,EASmBA,WATnB,kBAYd,CAAEH,YAAWC,YAAWC,SAAQC,eAZlB,kCAcrB6B,QAAQC,IAAR,MAdqB,0DAAH,sDAmBTC,EAAc,uCAAG,gCAAAN,EAAA,+EAEHE,IAAMC,IAAN,UAAaN,EAAb,WAFG,uBAElB1B,EAFkB,EAElBA,KAEFoC,EAAepC,EAAKqC,KAAI,SAACC,GAAD,MAAgB,CAC5CrC,UAAWqC,EAAUrC,UAAUsC,MAC/BpC,OAAQmC,EAAUnC,OAAOoC,MACzBC,KAAMF,EAAUG,eAPQ,kBASnBL,GATmB,gCAW1BH,QAAQC,IAAR,MAX0B,yDAAH,qDAgBdQ,EAAc,uCAAG,8BAAAb,EAAA,+EAIhBE,IAAMC,IAAN,UAAaN,EAAb,eAJgB,uBAGhBiB,EAHgB,EAGxB3C,KAAQ2C,UAHgB,kBAKnBA,EAAUN,KAAI,SAACT,GAAD,OAAaA,EAAQgB,SALhB,gCAO1BX,QAAQC,IAAR,MAP0B,yDAAH,qD,QCtCd1C,EAAYC,IAAOC,IAAV,yFCgEPmD,EA7DD,SAAC,GAAyD,IAAD,IAAtD7C,KAAQC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,OAAUyB,EAAc,EAAdA,QAAc,EACnCkB,mBAAS,IAD0B,mBAC9DR,EAD8D,KACnDS,EADmD,KAGrEC,qBAAU,YACM,uCAAG,4BAAAnB,EAAA,sEACgBM,IADhB,OACTc,EADS,OAEfF,EAAaE,GAFE,2CAAH,qDAKdC,KACC,IAEH,IAAMC,EAAWlD,EACf,cAAC,MAAD,CACED,KAAM,CACJoD,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACEC,MAAO,SACPC,gBAAiB,CACf,sBACA,sBACA,oBAEFvD,KAAM,CAACC,EAAUsB,MAAOrB,EAAUqB,MAAOpB,EAAOoB,UAItDiC,QAAS,CACPC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAsBhC,OAGpD,KAEEiC,EAAYvB,EAAU,GAC1B,cAAC,OAAD,CACEtC,KAAM,CACJoD,OAAQd,EAAUD,KAAI,qBAAGG,QACzBa,SAAU,CACR,CACErD,KAAMsC,EAAUD,KAAI,SAACrC,GAAD,OAAUA,EAAKC,aACnCqD,MAAO,WACPQ,YAAa,sBACbC,MAAM,GAER,CACE/D,KAAMsC,EAAUD,KAAI,SAACrC,GAAD,OAAUA,EAAKG,UACnCmD,MAAO,SACPQ,YAAa,mBACbC,MAAM,OAKZ,KAGJ,OAAO,cAAC,EAAD,UAAYnC,EAAUuB,EAAWU,K,kBC7D7BG,EAAqBvE,IAAOC,IAAV,mDCkChBuE,EA/BO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EACfpB,mBAAS,IADM,mBAC1CH,EAD0C,KAC/BwB,EAD+B,KAWjD,OARAnB,qBAAU,YACM,uCAAG,sBAAAnB,EAAA,kEACfsC,EADe,SACIzB,IADJ,6EAAH,qDAIdQ,KACC,IAGD,cAACc,EAAD,UACE,cAACI,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CACEC,aAAa,GACbC,SAAU,SAACC,GAAD,OAAON,EAAoBM,EAAEC,OAAOlD,QAFhD,UAIE,wBAAQA,MAAM,GAAd,qBACCoB,EAAUN,KAAI,SAACT,EAAS8C,GAAV,OACb,yBAAgBnD,MAAOK,EAAvB,UACG,IACAA,EAAS,MAFC8C,cCzBV,MAA0B,mCCc1BC,I,IAAAA,EAXf,WACE,OACE,8BACE,eAAC5D,EAAA,EAAD,CAAYC,MAAM,gBAAlB,UACG,IADH,SAEU,IAAIQ,MAAOoD,cAFrB,oBCCApF,EAAYC,IAAOC,IAAV,qKAMX,+HAOEmF,EAAepF,IAAOC,IAAV,kEAyCHoF,EApCf,4MACEC,MAAQ,CACN/E,KAAM,GACN4B,QAAS,IAHb,EAYEsC,oBAZF,uCAYwB,WAAOtC,GAAP,eAAAC,EAAA,sEACDF,EAAUC,GADT,OACd5B,EADc,OAGpB,EAAKgF,SAAS,CAAEhF,OAAM4B,QAASA,IAHX,2CAZxB,oJAME,4BAAAC,EAAA,sEACqBF,IADrB,OACQ3B,EADR,OAGEiF,KAAKD,SAAS,CAAEhF,SAHlB,gDANF,0EAkBE,WAAU,IAAD,EACmBiF,KAAKF,MAAvB/E,EADD,EACCA,KAAM4B,EADP,EACOA,QAEd,OACE,eAAC,EAAD,WACE,cAACiD,EAAD,UACE,qBAAKK,IAAKC,EAAOC,IAAI,aAGvB,cAAC,EAAD,CAAOpF,KAAMA,IACb,cAAC,EAAD,CAAekE,oBAAqBe,KAAKf,sBACzC,cAAC,EAAD,CAAOlE,KAAMA,EAAM4B,QAASA,IAC5B,cAAC,EAAD,WA9BR,GAAyByD,aCpBzBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b63178df.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  margin: 50px 0;\n`;\n\nexport const CardWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const InfectedWrapper = styled.div`\n  border-bottom: 12px solid rgba(111, 166, 232);\n`;\nexport const RecoveredWrapper = styled.div`\n  border-bottom: 12px solid rgba(133, 242, 131);\n`;\n\nexport const DeathWrapper = styled.div`\n  border-bottom: 12px solid rgba(97, 21, 29);\n`;\n","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport {\n  Container,\n  CardWrapper,\n  InfectedWrapper,\n  RecoveredWrapper,\n  DeathWrapper,\n} from \"./Cards.elements\";\nimport {\n  cyInfectedDashBoard,\n  cyRecoveredDashBoard,\n  cyDeathDashBoard,\n} from \"../../handles/index.js\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Page Loading...\";\n  }\n  return (\n    <Container>\n      <Grid container spacing={3} justify=\"center\">\n        <CardWrapper>\n          <Grid item component={Card} xs={12} md={3}>\n            <InfectedWrapper>\n              {\" \"}\n              <CardContent>\n                <Typography color=\"textSecondary\" gutterBottom>\n                  {\" \"}\n                  Infected\n                </Typography>\n                <Typography variant=\"h5\">\n                  <div data-cy={cyInfectedDashBoard}>\n                    {new Intl.NumberFormat().format(confirmed.value)}\n                  </div>\n                </Typography>{\" \"}\n                <Typography color=\"textSecondary\">\n                  {new Date(lastUpdate).toDateString()}\n                </Typography>\n                <Typography variant=\"body2\">\n                  Number of Covid-19 active cases\n                </Typography>\n              </CardContent>\n            </InfectedWrapper>\n          </Grid>\n\n          <Grid item component={Card} xs={12} md={3}>\n            <RecoveredWrapper>\n              <CardContent>\n                <Typography color=\"textSecondary\" gutterBottom>\n                  {\" \"}\n                  Recovered\n                </Typography>\n                <Typography variant=\"h5\">\n                  <div data-cy={cyRecoveredDashBoard}>\n                    {new Intl.NumberFormat().format(recovered.value)}\n                  </div>\n                </Typography>\n                <Typography color=\"textSecondary\">\n                  {new Date(lastUpdate).toDateString()}\n                </Typography>\n                <Typography variant=\"body2\">\n                  Number of Recovered Covid-19 patients\n                </Typography>\n              </CardContent>\n            </RecoveredWrapper>\n          </Grid>\n\n          <Grid item component={Card} xs={12} md={3}>\n            <DeathWrapper>\n              <CardContent>\n                <Typography color=\"textSecondary\" gutterBottom>\n                  {\" \"}\n                  Deaths\n                </Typography>\n                <Typography variant=\"h5\">\n                  <div data-cy={cyDeathDashBoard}>\n                    {new Intl.NumberFormat().format(deaths.value)}\n                  </div>\n                </Typography>\n                <Typography color=\"textSecondary\">\n                  {new Date(lastUpdate).toDateString()}\n                </Typography>\n                <Typography variant=\"body2\">\n                  Number of Covid-19 related deaths\n                </Typography>\n              </CardContent>\n            </DeathWrapper>\n          </Grid>\n        </CardWrapper>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Cards;\n","export const cyInfectedDashBoard = 'infectedDashBoard';\nexport const cyRecoveredDashBoard = 'recoveredDashBoard';\nexport const cyDeathDashBoard = 'deathDashBoard';","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\n//Api function for Cards.jsx & effect observed on selected country\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changeableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Api function for Charts.jsx\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`); // fetching daily data\n\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Api function CountryPicker.jsx\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n    return countries.map((country) => country.name);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 82%;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport { Container } from \"./Chart.elements.js\";\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState({});\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n      setDailyData(initialDailyData);\n    };\n\n    fetchAPI();\n  }, []);\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(111, 166, 232)\",\n              \"rgba(133, 242, 131)\",\n              \"rgba(97, 21, 29)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n\n  const lineChart = dailyData[0] ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map((data) => data.confirmed),\n            label: \"Infected\",\n            borderColor: \"rgba(111, 166, 232)\",\n            fill: true,\n          },\n          {\n            data: dailyData.map((data) => data.deaths),\n            label: \"Deaths\",\n            borderColor: \"rgba(97, 21, 29)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n  //labels, dataset etc  synthax from chart.js documentation\n\n  return <Container>{country ? barChart : lineChart}</Container>;\n};\n\nexport default Chart;\n","import styled from \"styled-components\";\n\nexport const FormControlWrapper = styled.div`\n  margin-bottom: 5px;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport { fetchCountries } from \"../../api\";\nimport { FormControlWrapper } from \"./CountryPicker.elements\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, []);\n\n  return (\n    <FormControlWrapper>\n      <FormControl>\n        <NativeSelect\n          defaultValue=\"\"\n          onChange={(e) => handleCountryChange(e.target.value)}\n        >\n          <option value=\"\">Global </option>\n          {countries.map((country, i) => (\n            <option key={i} value={country}>\n              {\" \"}\n              {country}{\" \"}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    </FormControlWrapper>\n  );\n};\n\nexport default CountryPicker;\n","export default __webpack_public_path__ + \"static/media/image1.e13b52e3.jpg\";","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nfunction Footers() {\n  return (\n    <div>\n      <Typography color=\"textSecondary\">\n        {\" \"}\n        &copy; {new Date().getFullYear()} Copyright:\n      </Typography>\n    </div>\n  );\n}\n\nexport default Footers;\n","import React, { Component } from \"react\";\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styled from \"styled-components\";\nimport { fetchData } from \"./api\";\nimport image from \"./images/image1.jpg\";\nimport Footers from \"./components/Footers/Footers\";\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  background-attachment: fixed;\n  ${() => `background-image: linear-gradient(\n    to bottom,\n    rgb(114, 114, 186),\n    rgb(170, 232, 232)\n  )`}\n`;\n\nconst ImageWrapper = styled.div`\n  width: 400px;\n  margin-top: 14px;\n`;\n\nexport class App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const data = await fetchData();\n\n    this.setState({ data });\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n\n    this.setState({ data, country: country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <Container>\n        <ImageWrapper>\n          <img src={image} alt=\"corona\" />\n        </ImageWrapper>\n\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n        <Footers />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root')); \n"],"sourceRoot":""}